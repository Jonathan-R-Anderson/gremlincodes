user nobody;
worker_processes  auto;  # Automatically adjust worker processes based on available CPU cores

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

rtmp_auto_push on;  # Enable RTMP auto-push to multiple workers

events {
    worker_connections  1024;  # Increase the number of connections Nginx can handle
}

# RTMP configuration
rtmp {
    server {
        listen 1935;  # RTMP port for streaming

        # RTMP application for live streaming (e.g., via OBS)
        application live {
            live on;
            record off;

            # Path to store HLS segments for WebTorrent seeding
            hls on;
            hls_path /var/www/hls;  # Change this to where you want to store segments
            hls_fragment 5s;  # Length of each HLS segment
            hls_playlist_length 60s;  # Length of the HLS playlist

            # Allow publishing and playing of streams
            allow publish all;
            allow play all;
        }
    }
}

# HTTP configuration (including HTTPS and proxy to Flask)
http {
    upstream flask {
        server 127.0.0.1:5000;  # Flask app on localhost
    }

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    client_max_body_size 50M;  # Allow file uploads up to 50MB

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    types_hash_max_size 2048;

    # HTTPS server block
    server {
        listen 443 ssl;
        listen [::]:443 ssl;  # Support for IPv6
        server_name gremlin.codes;

        # Self-signed SSL certificates
        ssl_certificate /etc/nginx/ssl/self-signed.crt;
        ssl_certificate_key /etc/nginx/ssl/self-signed.key;

        # Strong Diffie-Hellman group
        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_prefer_server_ciphers on;

        # Enable CORS globally for all routes
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS";
        add_header Access-Control-Allow-Headers "Authorization, Origin, X-Requested-With, Content-Type, Accept";

        # Proxy to Flask app
        location / {
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /static/ {
            alias /usr/share/nginx/html/;
        }

        # Caching static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 30d;
            add_header Cache-Control "public";
        }

        # Serve HLS streaming content
        location /hls {
            alias /tmp/hls;
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            add_header Cache-Control no-cache;
        }
    }

    # RTMP stream playback via HLS
    server {
        listen 80 default_server;
        listen [::]:80 default_server;

        server_name _;

        # Serve HLS content
        location /hls/ {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            alias /var/www/hls/;
            expires -1;
            add_header 'Access-Control-Allow-Origin' '*' always;
        }

        # Serve the live stream page (OBS uploads go here)
        location /live {
            root /var/www/html;
            index index.html;

            add_header 'Access-Control-Allow-Origin' '*' always;
        }
    }
}
